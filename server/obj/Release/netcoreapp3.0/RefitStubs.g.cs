// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Refit;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace server.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace server.Services
{
    using server.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAccountsService : IAccountsService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAccountsService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<Object> IAccountsService.GetByIdAsync(string accountId, string authorization)
        {
            var arguments = new object[] { accountId, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByIdAsync", new Type[] { typeof(string), typeof(string) });
            return (Task<Object>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Object> IAccountsService.GetImagesAsync(string username, int page, string authorization)
        {
            var arguments = new object[] { username, page, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetImagesAsync", new Type[] { typeof(string), typeof(int), typeof(string) });
            return (Task<Object>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Object> IAccountsService.GetSettingsAsync(string username, string authorization)
        {
            var arguments = new object[] { username, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetSettingsAsync", new Type[] { typeof(string), typeof(string) });
            return (Task<Object>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Object> IAccountsService.GetFavoritesAsync(string username, int page, string authorization)
        {
            var arguments = new object[] { username, page, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFavoritesAsync", new Type[] { typeof(string), typeof(int), typeof(string) });
            return (Task<Object>)func(Client, arguments);
        }
    }
}

namespace server.Services
{
    using server.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIImagesService : IImagesService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIImagesService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<Object> IImagesService.GetByHashAsync(string imageHash, string authorization)
        {
            var arguments = new object[] { imageHash, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByHashAsync", new Type[] { typeof(string), typeof(string) });
            return (Task<Object>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Object> IImagesService.DeleteAsync(string imageHash, string authorization)
        {
            var arguments = new object[] { imageHash, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteAsync", new Type[] { typeof(string), typeof(string) });
            return (Task<Object>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Object> IImagesService.SetFavoriteAsync(string imageHash, string authorization)
        {
            var arguments = new object[] { imageHash, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetFavoriteAsync", new Type[] { typeof(string), typeof(string) });
            return (Task<Object>)func(Client, arguments);
        }
    }
}
